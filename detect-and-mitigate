DDOS can happen in many ways. The most common one's are SYN attacks. 
Attackers can even fake the source IPs or they can even spoof the source IPs.

******** Detecting SYN attack ********
Attacker can flood the destination with SYN packets and it can simply ignore the ACKs received from the source.
The destination will remain in SYN_RECV state meaning your server has received the initial SYN packet, it has sent it's own SYN+ACK packet and is waiting on the ACK from the external machine to complete the TCP handshake.

[root@0-10-e0-23-7b-4e ~]$ netstat -npt | awk '{print $6}' | sort | uniq -c | sort -nr | head
  71749 SYN_RECV              <--- Possible SYN attack
   2095 ESTABLISHED
     52 TIME_WAIT
      4 FIN_WAIT2
      1 Foreign
      1 
      
******** Mitigating SYN attack ********
Detect the attacker source. It can be from single IP or multiple IPs or the source can a spoofed IP.

If attacker is a single IP:
[root@0-10-e0-23-7b-4e ~]$ netstat -npt  | grep SYN_RECV | awk '{print $5}' | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | cut -d: -f1 | sort | uniq -c | sort -nr | head
      413  X.175.191.23
      2      Y.49.92.30
      2      Z.225.121.76
      2     A.219.69.149
      2     B.152.24.254


Now you know the culprit IP, you could just block the IP. There are various ways you could block the IP.
Common and quick ways are:
a)Drop packets using ip command: ip route add blackhole X.175.191.23/32

b)Drop packets using iptables command: iptables -A INPUT -s X.175.191.23 -j DROP

Is ip or iptables command better to use? Hard to say since both works at layer 3/4 of OSI model. 
You need to check how large is your routing table or iptables. The one to traverse fast should be used.

Multiple IP attack (common subnet):
machine1 : netstat -npt  | grep SYN_RECV | awk '{print $5}' | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | cut -d: -f1 | sort | uniq -c | sort -nr | head
      345  X.175.191.13
      243  X.175.190.27
      34  X.175.181.33
      78  X.175.41.24
      2  Y.42.91.30
      2   Z.125.121.76


Common and quick ways are:
a)Drop subnet using ip command: 
machine1: ip route add blackhole X.175.0.0/16

b)Drop subnet using iptables command:
iptables -A INPUT -s X.175.0.0/16 -j DROP



Its pretty common to have SYN flood attacks from multiple IPs by spoofing source IP address in packets. 
This way its becomes hard to distinguish sometimes which are real IPs and which are fake.
Multiple IP attack (different subnet):
machine1 : netstat -npt  | grep SYN_RECV | awk '{print $5}' | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | cut -d: -f1 | sort | uniq -c | sort -nr | head
      3  X.175.191.23
      2  Y.42.91.30
      2   Z.125.121.76
      2   A.219.69.149
      2   B.152.24.254
     2   C.142.44.254
     2   D.52.54.214
     1   E.15.27.250



SYN cookies dramatically reduces your CPU and memory usage durin SYN flood attack and helps to keep machine a bit happy.
When SYN Cookie is enabled on JUNOS software with enhanced services and becomes the TCP-negotiating proxy for the destination server, 
it replies to each incoming SYN segment with a SYN/ACK containing an encrypted cookie as its Initial Sequence Number (ISN). 
The cookie is an MD5 hash of the original source address and port number, destination address and port number, 
and ISN from the original SYN packet. After sending the cookie, JUNOS software with enhanced services drops the original SYN packet 
and deletes the calculated cookie from memory. If there is no response to the packet containing the cookie, the attack is noted as an 
active SYN attack and is effectively stopped. If the initiating host responds with a TCP packet containing the cookie +1 in 
the TCP ACK field, JUNOS software with enhanced services extracts the cookie, subtracts 1 from the value, and recomputes 
the cookie to validate that it is a legitimate ACK. If it is legitimate, JUNOS software with enhanced services starts the 
TCP proxy process by setting up a session and sending a SYN to the server containing the source information from the 
original SYN. When JUNOS software with enhanced services receives a SYN/ACK from the server, it sends ACKs to the server and 
to the initiation host. At this point the connection is established and the host and server are able to communicate directly.

Syn Cookies
#Check if SYN cookie is enabled or not:

machine1 : sysctl -a | grep tcp_syncookies
net.ipv4.tcp_syncookies = 0

#Enable it:
machine1 : sysctl -w net.ipv4.tcp_syncookies=1


